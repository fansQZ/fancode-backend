// Code generated by MockGen. DO NOT EDIT.
// Source: dao/problem_dao.go

// Package dao is a generated GoMock package.
package mock

import (
	dto "FanCode/models/dto"
	po "FanCode/models/po"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockProblemDao is a mock of ProblemDao interface.
type MockProblemDao struct {
	ctrl     *gomock.Controller
	recorder *MockProblemDaoMockRecorder
}

// MockProblemDaoMockRecorder is the mock recorder for MockProblemDao.
type MockProblemDaoMockRecorder struct {
	mock *MockProblemDao
}

// NewMockProblemDao creates a new mock instance.
func NewMockProblemDao(ctrl *gomock.Controller) *MockProblemDao {
	mock := &MockProblemDao{ctrl: ctrl}
	mock.recorder = &MockProblemDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemDao) EXPECT() *MockProblemDaoMockRecorder {
	return m.recorder
}

// CheckProblemNumberExists mocks base method.
func (m *MockProblemDao) CheckProblemNumberExists(db *gorm.DB, problemCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProblemNumberExists", db, problemCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProblemNumberExists indicates an expected call of CheckProblemNumberExists.
func (mr *MockProblemDaoMockRecorder) CheckProblemNumberExists(db, problemCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProblemNumberExists", reflect.TypeOf((*MockProblemDao)(nil).CheckProblemNumberExists), db, problemCode)
}

// DeleteProblemByID mocks base method.
func (m *MockProblemDao) DeleteProblemByID(db *gorm.DB, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProblemByID", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProblemByID indicates an expected call of DeleteProblemByID.
func (mr *MockProblemDaoMockRecorder) DeleteProblemByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProblemByID", reflect.TypeOf((*MockProblemDao)(nil).DeleteProblemByID), db, id)
}

// GetProblemByID mocks base method.
func (m *MockProblemDao) GetProblemByID(db *gorm.DB, problemID uint) (*po.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemByID", db, problemID)
	ret0, _ := ret[0].(*po.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemByID indicates an expected call of GetProblemByID.
func (mr *MockProblemDaoMockRecorder) GetProblemByID(db, problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemByID", reflect.TypeOf((*MockProblemDao)(nil).GetProblemByID), db, problemID)
}

// GetProblemByNumber mocks base method.
func (m *MockProblemDao) GetProblemByNumber(db *gorm.DB, problemCode string) (*po.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemByNumber", db, problemCode)
	ret0, _ := ret[0].(*po.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemByNumber indicates an expected call of GetProblemByNumber.
func (mr *MockProblemDaoMockRecorder) GetProblemByNumber(db, problemCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemByNumber", reflect.TypeOf((*MockProblemDao)(nil).GetProblemByNumber), db, problemCode)
}

// GetProblemCount mocks base method.
func (m *MockProblemDao) GetProblemCount(db *gorm.DB, problem *po.Problem) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemCount", db, problem)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemCount indicates an expected call of GetProblemCount.
func (mr *MockProblemDaoMockRecorder) GetProblemCount(db, problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemCount", reflect.TypeOf((*MockProblemDao)(nil).GetProblemCount), db, problem)
}

// GetProblemFilePathByID mocks base method.
func (m *MockProblemDao) GetProblemFilePathByID(db *gorm.DB, id uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemFilePathByID", db, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemFilePathByID indicates an expected call of GetProblemFilePathByID.
func (mr *MockProblemDaoMockRecorder) GetProblemFilePathByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemFilePathByID", reflect.TypeOf((*MockProblemDao)(nil).GetProblemFilePathByID), db, id)
}

// GetProblemIDByNumber mocks base method.
func (m *MockProblemDao) GetProblemIDByNumber(db *gorm.DB, problemNumber string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemIDByNumber", db, problemNumber)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemIDByNumber indicates an expected call of GetProblemIDByNumber.
func (mr *MockProblemDaoMockRecorder) GetProblemIDByNumber(db, problemNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemIDByNumber", reflect.TypeOf((*MockProblemDao)(nil).GetProblemIDByNumber), db, problemNumber)
}

// GetProblemList mocks base method.
func (m *MockProblemDao) GetProblemList(db *gorm.DB, pageQuery *dto.PageQuery) ([]*po.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemList", db, pageQuery)
	ret0, _ := ret[0].([]*po.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemList indicates an expected call of GetProblemList.
func (mr *MockProblemDaoMockRecorder) GetProblemList(db, pageQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemList", reflect.TypeOf((*MockProblemDao)(nil).GetProblemList), db, pageQuery)
}

// GetProblemNameByID mocks base method.
func (m *MockProblemDao) GetProblemNameByID(db *gorm.DB, problemID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemNameByID", db, problemID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemNameByID indicates an expected call of GetProblemNameByID.
func (mr *MockProblemDaoMockRecorder) GetProblemNameByID(db, problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemNameByID", reflect.TypeOf((*MockProblemDao)(nil).GetProblemNameByID), db, problemID)
}

// InsertProblem mocks base method.
func (m *MockProblemDao) InsertProblem(db *gorm.DB, problem *po.Problem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProblem", db, problem)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProblem indicates an expected call of InsertProblem.
func (mr *MockProblemDaoMockRecorder) InsertProblem(db, problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProblem", reflect.TypeOf((*MockProblemDao)(nil).InsertProblem), db, problem)
}

// SetProblemEnable mocks base method.
func (m *MockProblemDao) SetProblemEnable(db *gorm.DB, id uint, enable int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProblemEnable", db, id, enable)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProblemEnable indicates an expected call of SetProblemEnable.
func (mr *MockProblemDaoMockRecorder) SetProblemEnable(db, id, enable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProblemEnable", reflect.TypeOf((*MockProblemDao)(nil).SetProblemEnable), db, id, enable)
}

// UpdatePathByID mocks base method.
func (m *MockProblemDao) UpdatePathByID(db *gorm.DB, path string, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePathByID", db, path, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePathByID indicates an expected call of UpdatePathByID.
func (mr *MockProblemDaoMockRecorder) UpdatePathByID(db, path, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePathByID", reflect.TypeOf((*MockProblemDao)(nil).UpdatePathByID), db, path, id)
}

// UpdateProblem mocks base method.
func (m *MockProblemDao) UpdateProblem(db *gorm.DB, problem *po.Problem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProblem", db, problem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProblem indicates an expected call of UpdateProblem.
func (mr *MockProblemDaoMockRecorder) UpdateProblem(db, problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblem", reflect.TypeOf((*MockProblemDao)(nil).UpdateProblem), db, problem)
}

// UpdateProblemField mocks base method.
func (m *MockProblemDao) UpdateProblemField(db *gorm.DB, id uint, field, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProblemField", db, id, field, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProblemField indicates an expected call of UpdateProblemField.
func (mr *MockProblemDaoMockRecorder) UpdateProblemField(db, id, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblemField", reflect.TypeOf((*MockProblemDao)(nil).UpdateProblemField), db, id, field, value)
}
