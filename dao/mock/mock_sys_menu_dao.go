// Code generated by MockGen. DO NOT EDIT.
// Source: dao/sys_menu_dao.go

// Package dao is a generated GoMock package.
package mock

import (
	po "FanCode/models/po"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSysMenuDao is a mock of SysMenuDao interface.
type MockSysMenuDao struct {
	ctrl     *gomock.Controller
	recorder *MockSysMenuDaoMockRecorder
}

// MockSysMenuDaoMockRecorder is the mock recorder for MockSysMenuDao.
type MockSysMenuDaoMockRecorder struct {
	mock *MockSysMenuDao
}

// NewMockSysMenuDao creates a new mock instance.
func NewMockSysMenuDao(ctrl *gomock.Controller) *MockSysMenuDao {
	mock := &MockSysMenuDao{ctrl: ctrl}
	mock.recorder = &MockSysMenuDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysMenuDao) EXPECT() *MockSysMenuDaoMockRecorder {
	return m.recorder
}

// DeleteMenuByID mocks base method.
func (m *MockSysMenuDao) DeleteMenuByID(db *gorm.DB, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMenuByID", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMenuByID indicates an expected call of DeleteMenuByID.
func (mr *MockSysMenuDaoMockRecorder) DeleteMenuByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMenuByID", reflect.TypeOf((*MockSysMenuDao)(nil).DeleteMenuByID), db, id)
}

// GetAllMenu mocks base method.
func (m *MockSysMenuDao) GetAllMenu(db *gorm.DB) ([]*po.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMenu", db)
	ret0, _ := ret[0].([]*po.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMenu indicates an expected call of GetAllMenu.
func (mr *MockSysMenuDaoMockRecorder) GetAllMenu(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMenu", reflect.TypeOf((*MockSysMenuDao)(nil).GetAllMenu), db)
}

// GetChildMenusByParentID mocks base method.
func (m *MockSysMenuDao) GetChildMenusByParentID(db *gorm.DB, parentID uint) ([]*po.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildMenusByParentID", db, parentID)
	ret0, _ := ret[0].([]*po.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildMenusByParentID indicates an expected call of GetChildMenusByParentID.
func (mr *MockSysMenuDaoMockRecorder) GetChildMenusByParentID(db, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildMenusByParentID", reflect.TypeOf((*MockSysMenuDao)(nil).GetChildMenusByParentID), db, parentID)
}

// GetMenuByID mocks base method.
func (m *MockSysMenuDao) GetMenuByID(db *gorm.DB, id uint) (*po.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuByID", db, id)
	ret0, _ := ret[0].(*po.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuByID indicates an expected call of GetMenuByID.
func (mr *MockSysMenuDaoMockRecorder) GetMenuByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuByID", reflect.TypeOf((*MockSysMenuDao)(nil).GetMenuByID), db, id)
}

// GetMenuCount mocks base method.
func (m *MockSysMenuDao) GetMenuCount(db *gorm.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuCount", db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuCount indicates an expected call of GetMenuCount.
func (mr *MockSysMenuDaoMockRecorder) GetMenuCount(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuCount", reflect.TypeOf((*MockSysMenuDao)(nil).GetMenuCount), db)
}

// GetMenuListByParentID mocks base method.
func (m *MockSysMenuDao) GetMenuListByParentID(db *gorm.DB, parentID int32) ([]*po.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuListByParentID", db, parentID)
	ret0, _ := ret[0].([]*po.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuListByParentID indicates an expected call of GetMenuListByParentID.
func (mr *MockSysMenuDaoMockRecorder) GetMenuListByParentID(db, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuListByParentID", reflect.TypeOf((*MockSysMenuDao)(nil).GetMenuListByParentID), db, parentID)
}

// GetMenuListByPathKeyword mocks base method.
func (m *MockSysMenuDao) GetMenuListByPathKeyword(db *gorm.DB, keyword string, page, pageSize int) ([]*po.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuListByPathKeyword", db, keyword, page, pageSize)
	ret0, _ := ret[0].([]*po.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuListByPathKeyword indicates an expected call of GetMenuListByPathKeyword.
func (mr *MockSysMenuDaoMockRecorder) GetMenuListByPathKeyword(db, keyword, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuListByPathKeyword", reflect.TypeOf((*MockSysMenuDao)(nil).GetMenuListByPathKeyword), db, keyword, page, pageSize)
}

// InsertMenu mocks base method.
func (m *MockSysMenuDao) InsertMenu(db *gorm.DB, menu *po.SysMenu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMenu", db, menu)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMenu indicates an expected call of InsertMenu.
func (mr *MockSysMenuDaoMockRecorder) InsertMenu(db, menu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMenu", reflect.TypeOf((*MockSysMenuDao)(nil).InsertMenu), db, menu)
}

// UpdateMenu mocks base method.
func (m *MockSysMenuDao) UpdateMenu(db *gorm.DB, menu *po.SysMenu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenu", db, menu)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMenu indicates an expected call of UpdateMenu.
func (mr *MockSysMenuDaoMockRecorder) UpdateMenu(db, menu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenu", reflect.TypeOf((*MockSysMenuDao)(nil).UpdateMenu), db, menu)
}
