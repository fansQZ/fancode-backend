// Code generated by MockGen. DO NOT EDIT.
// Source: dao/sys_role_dao.go

// Package dao is a generated GoMock package.
package mock

import (
	dto "FanCode/models/dto"
	po "FanCode/models/po"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSysRoleDao is a mock of SysRoleDao interface.
type MockSysRoleDao struct {
	ctrl     *gomock.Controller
	recorder *MockSysRoleDaoMockRecorder
}

// MockSysRoleDaoMockRecorder is the mock recorder for MockSysRoleDao.
type MockSysRoleDaoMockRecorder struct {
	mock *MockSysRoleDao
}

// NewMockSysRoleDao creates a new mock instance.
func NewMockSysRoleDao(ctrl *gomock.Controller) *MockSysRoleDao {
	mock := &MockSysRoleDao{ctrl: ctrl}
	mock.recorder = &MockSysRoleDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysRoleDao) EXPECT() *MockSysRoleDaoMockRecorder {
	return m.recorder
}

// DeleteRoleAPIsByRoleID mocks base method.
func (m *MockSysRoleDao) DeleteRoleAPIsByRoleID(db *gorm.DB, roleID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleAPIsByRoleID", db, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleAPIsByRoleID indicates an expected call of DeleteRoleAPIsByRoleID.
func (mr *MockSysRoleDaoMockRecorder) DeleteRoleAPIsByRoleID(db, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleAPIsByRoleID", reflect.TypeOf((*MockSysRoleDao)(nil).DeleteRoleAPIsByRoleID), db, roleID)
}

// DeleteRoleByID mocks base method.
func (m *MockSysRoleDao) DeleteRoleByID(db *gorm.DB, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleByID", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleByID indicates an expected call of DeleteRoleByID.
func (mr *MockSysRoleDaoMockRecorder) DeleteRoleByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleByID", reflect.TypeOf((*MockSysRoleDao)(nil).DeleteRoleByID), db, id)
}

// DeleteRoleMenusByRoleID mocks base method.
func (m *MockSysRoleDao) DeleteRoleMenusByRoleID(db *gorm.DB, roleID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleMenusByRoleID", db, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleMenusByRoleID indicates an expected call of DeleteRoleMenusByRoleID.
func (mr *MockSysRoleDaoMockRecorder) DeleteRoleMenusByRoleID(db, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleMenusByRoleID", reflect.TypeOf((*MockSysRoleDao)(nil).DeleteRoleMenusByRoleID), db, roleID)
}

// GetAllSimpleRoleList mocks base method.
func (m *MockSysRoleDao) GetAllSimpleRoleList(db *gorm.DB) ([]*po.SysRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSimpleRoleList", db)
	ret0, _ := ret[0].([]*po.SysRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSimpleRoleList indicates an expected call of GetAllSimpleRoleList.
func (mr *MockSysRoleDaoMockRecorder) GetAllSimpleRoleList(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSimpleRoleList", reflect.TypeOf((*MockSysRoleDao)(nil).GetAllSimpleRoleList), db)
}

// GetApiIDsByRoleID mocks base method.
func (m *MockSysRoleDao) GetApiIDsByRoleID(db *gorm.DB, roleID uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiIDsByRoleID", db, roleID)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiIDsByRoleID indicates an expected call of GetApiIDsByRoleID.
func (mr *MockSysRoleDaoMockRecorder) GetApiIDsByRoleID(db, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiIDsByRoleID", reflect.TypeOf((*MockSysRoleDao)(nil).GetApiIDsByRoleID), db, roleID)
}

// GetApisByRoleID mocks base method.
func (m *MockSysRoleDao) GetApisByRoleID(db *gorm.DB, roleID uint) ([]*po.SysApi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApisByRoleID", db, roleID)
	ret0, _ := ret[0].([]*po.SysApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApisByRoleID indicates an expected call of GetApisByRoleID.
func (mr *MockSysRoleDaoMockRecorder) GetApisByRoleID(db, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApisByRoleID", reflect.TypeOf((*MockSysRoleDao)(nil).GetApisByRoleID), db, roleID)
}

// GetMenuIDsByRoleID mocks base method.
func (m *MockSysRoleDao) GetMenuIDsByRoleID(db *gorm.DB, roleID uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuIDsByRoleID", db, roleID)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuIDsByRoleID indicates an expected call of GetMenuIDsByRoleID.
func (mr *MockSysRoleDaoMockRecorder) GetMenuIDsByRoleID(db, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuIDsByRoleID", reflect.TypeOf((*MockSysRoleDao)(nil).GetMenuIDsByRoleID), db, roleID)
}

// GetMenusByRoleID mocks base method.
func (m *MockSysRoleDao) GetMenusByRoleID(db *gorm.DB, roleID uint) ([]*po.SysMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenusByRoleID", db, roleID)
	ret0, _ := ret[0].([]*po.SysMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenusByRoleID indicates an expected call of GetMenusByRoleID.
func (mr *MockSysRoleDaoMockRecorder) GetMenusByRoleID(db, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenusByRoleID", reflect.TypeOf((*MockSysRoleDao)(nil).GetMenusByRoleID), db, roleID)
}

// GetRoleByID mocks base method.
func (m *MockSysRoleDao) GetRoleByID(db *gorm.DB, roleID uint) (*po.SysRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", db, roleID)
	ret0, _ := ret[0].(*po.SysRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockSysRoleDaoMockRecorder) GetRoleByID(db, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockSysRoleDao)(nil).GetRoleByID), db, roleID)
}

// GetRoleCount mocks base method.
func (m *MockSysRoleDao) GetRoleCount(db *gorm.DB, role *po.SysRole) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleCount", db, role)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleCount indicates an expected call of GetRoleCount.
func (mr *MockSysRoleDaoMockRecorder) GetRoleCount(db, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleCount", reflect.TypeOf((*MockSysRoleDao)(nil).GetRoleCount), db, role)
}

// GetRoleList mocks base method.
func (m *MockSysRoleDao) GetRoleList(db *gorm.DB, pageQuery *dto.PageQuery) ([]*po.SysRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleList", db, pageQuery)
	ret0, _ := ret[0].([]*po.SysRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleList indicates an expected call of GetRoleList.
func (mr *MockSysRoleDaoMockRecorder) GetRoleList(db, pageQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleList", reflect.TypeOf((*MockSysRoleDao)(nil).GetRoleList), db, pageQuery)
}

// InsertApisToRole mocks base method.
func (m *MockSysRoleDao) InsertApisToRole(db *gorm.DB, roleID uint, apiIDs []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertApisToRole", db, roleID, apiIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertApisToRole indicates an expected call of InsertApisToRole.
func (mr *MockSysRoleDaoMockRecorder) InsertApisToRole(db, roleID, apiIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertApisToRole", reflect.TypeOf((*MockSysRoleDao)(nil).InsertApisToRole), db, roleID, apiIDs)
}

// InsertMenusToRole mocks base method.
func (m *MockSysRoleDao) InsertMenusToRole(db *gorm.DB, roleID uint, menuIDs []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMenusToRole", db, roleID, menuIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMenusToRole indicates an expected call of InsertMenusToRole.
func (mr *MockSysRoleDaoMockRecorder) InsertMenusToRole(db, roleID, menuIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMenusToRole", reflect.TypeOf((*MockSysRoleDao)(nil).InsertMenusToRole), db, roleID, menuIDs)
}

// InsertRole mocks base method.
func (m *MockSysRoleDao) InsertRole(db *gorm.DB, role *po.SysRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRole", db, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRole indicates an expected call of InsertRole.
func (mr *MockSysRoleDaoMockRecorder) InsertRole(db, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRole", reflect.TypeOf((*MockSysRoleDao)(nil).InsertRole), db, role)
}

// UpdateRole mocks base method.
func (m *MockSysRoleDao) UpdateRole(db *gorm.DB, role *po.SysRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", db, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockSysRoleDaoMockRecorder) UpdateRole(db, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockSysRoleDao)(nil).UpdateRole), db, role)
}
