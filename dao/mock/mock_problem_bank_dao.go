// Code generated by MockGen. DO NOT EDIT.
// Source: dao/problem_bank_dao.go

// Package dao is a generated GoMock package.
package mock

import (
	dto "FanCode/models/dto"
	po "FanCode/models/po"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockProblemBankDao is a mock of ProblemBankDao interface.
type MockProblemBankDao struct {
	ctrl     *gomock.Controller
	recorder *MockProblemBankDaoMockRecorder
}

// MockProblemBankDaoMockRecorder is the mock recorder for MockProblemBankDao.
type MockProblemBankDaoMockRecorder struct {
	mock *MockProblemBankDao
}

// NewMockProblemBankDao creates a new mock instance.
func NewMockProblemBankDao(ctrl *gomock.Controller) *MockProblemBankDao {
	mock := &MockProblemBankDao{ctrl: ctrl}
	mock.recorder = &MockProblemBankDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemBankDao) EXPECT() *MockProblemBankDaoMockRecorder {
	return m.recorder
}

// DeleteProblemBankByID mocks base method.
func (m *MockProblemBankDao) DeleteProblemBankByID(db *gorm.DB, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProblemBankByID", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProblemBankByID indicates an expected call of DeleteProblemBankByID.
func (mr *MockProblemBankDaoMockRecorder) DeleteProblemBankByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProblemBankByID", reflect.TypeOf((*MockProblemBankDao)(nil).DeleteProblemBankByID), db, id)
}

// GetProblemBankByID mocks base method.
func (m *MockProblemBankDao) GetProblemBankByID(db *gorm.DB, bankID uint) (*po.ProblemBank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemBankByID", db, bankID)
	ret0, _ := ret[0].(*po.ProblemBank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemBankByID indicates an expected call of GetProblemBankByID.
func (mr *MockProblemBankDaoMockRecorder) GetProblemBankByID(db, bankID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemBankByID", reflect.TypeOf((*MockProblemBankDao)(nil).GetProblemBankByID), db, bankID)
}

// GetProblemBankCount mocks base method.
func (m *MockProblemBankDao) GetProblemBankCount(db *gorm.DB, problemBank *po.ProblemBank) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemBankCount", db, problemBank)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemBankCount indicates an expected call of GetProblemBankCount.
func (mr *MockProblemBankDaoMockRecorder) GetProblemBankCount(db, problemBank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemBankCount", reflect.TypeOf((*MockProblemBankDao)(nil).GetProblemBankCount), db, problemBank)
}

// GetProblemBankList mocks base method.
func (m *MockProblemBankDao) GetProblemBankList(db *gorm.DB, pageQuery *dto.PageQuery) ([]*po.ProblemBank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemBankList", db, pageQuery)
	ret0, _ := ret[0].([]*po.ProblemBank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemBankList indicates an expected call of GetProblemBankList.
func (mr *MockProblemBankDaoMockRecorder) GetProblemBankList(db, pageQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemBankList", reflect.TypeOf((*MockProblemBankDao)(nil).GetProblemBankList), db, pageQuery)
}

// GetSimpleProblemBankList mocks base method.
func (m *MockProblemBankDao) GetSimpleProblemBankList(db *gorm.DB) ([]*po.ProblemBank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSimpleProblemBankList", db)
	ret0, _ := ret[0].([]*po.ProblemBank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSimpleProblemBankList indicates an expected call of GetSimpleProblemBankList.
func (mr *MockProblemBankDaoMockRecorder) GetSimpleProblemBankList(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSimpleProblemBankList", reflect.TypeOf((*MockProblemBankDao)(nil).GetSimpleProblemBankList), db)
}

// InsertProblemBank mocks base method.
func (m *MockProblemBankDao) InsertProblemBank(db *gorm.DB, bank *po.ProblemBank) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProblemBank", db, bank)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProblemBank indicates an expected call of InsertProblemBank.
func (mr *MockProblemBankDaoMockRecorder) InsertProblemBank(db, bank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProblemBank", reflect.TypeOf((*MockProblemBankDao)(nil).InsertProblemBank), db, bank)
}

// UpdateProblemBank mocks base method.
func (m *MockProblemBankDao) UpdateProblemBank(db *gorm.DB, bank *po.ProblemBank) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProblemBank", db, bank)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProblemBank indicates an expected call of UpdateProblemBank.
func (mr *MockProblemBankDaoMockRecorder) UpdateProblemBank(db, bank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProblemBank", reflect.TypeOf((*MockProblemBankDao)(nil).UpdateProblemBank), db, bank)
}
