// Code generated by MockGen. DO NOT EDIT.
// Source: dao/sys_user_dao.go

// Package dao is a generated GoMock package.
package dao

import (
	dto "FanCode/models/dto"
	po "FanCode/models/po"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSysUserDao is a mock of SysUserDao interface.
type MockSysUserDao struct {
	ctrl     *gomock.Controller
	recorder *MockSysUserDaoMockRecorder
}

// MockSysUserDaoMockRecorder is the mock recorder for MockSysUserDao.
type MockSysUserDaoMockRecorder struct {
	mock *MockSysUserDao
}

// NewMockSysUserDao creates a new mock instance.
func NewMockSysUserDao(ctrl *gomock.Controller) *MockSysUserDao {
	mock := &MockSysUserDao{ctrl: ctrl}
	mock.recorder = &MockSysUserDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysUserDao) EXPECT() *MockSysUserDaoMockRecorder {
	return m.recorder
}

// CheckEmail mocks base method.
func (m *MockSysUserDao) CheckEmail(db *gorm.DB, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmail", db, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmail indicates an expected call of CheckEmail.
func (mr *MockSysUserDaoMockRecorder) CheckEmail(db, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmail", reflect.TypeOf((*MockSysUserDao)(nil).CheckEmail), db, email)
}

// CheckLoginName mocks base method.
func (m *MockSysUserDao) CheckLoginName(db *gorm.DB, loginname string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLoginName", db, loginname)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLoginName indicates an expected call of CheckLoginName.
func (mr *MockSysUserDaoMockRecorder) CheckLoginName(db, loginname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLoginName", reflect.TypeOf((*MockSysUserDao)(nil).CheckLoginName), db, loginname)
}

// DeleteUserByID mocks base method.
func (m *MockSysUserDao) DeleteUserByID(db *gorm.DB, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockSysUserDaoMockRecorder) DeleteUserByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockSysUserDao)(nil).DeleteUserByID), db, id)
}

// DeleteUserRoleByUserID mocks base method.
func (m *MockSysUserDao) DeleteUserRoleByUserID(db *gorm.DB, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRoleByUserID", db, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRoleByUserID indicates an expected call of DeleteUserRoleByUserID.
func (mr *MockSysUserDaoMockRecorder) DeleteUserRoleByUserID(db, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRoleByUserID", reflect.TypeOf((*MockSysUserDao)(nil).DeleteUserRoleByUserID), db, userID)
}

// GetRoleIDsByUserID mocks base method.
func (m *MockSysUserDao) GetRoleIDsByUserID(db *gorm.DB, userID uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleIDsByUserID", db, userID)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleIDsByUserID indicates an expected call of GetRoleIDsByUserID.
func (mr *MockSysUserDaoMockRecorder) GetRoleIDsByUserID(db, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleIDsByUserID", reflect.TypeOf((*MockSysUserDao)(nil).GetRoleIDsByUserID), db, userID)
}

// GetRolesByUserID mocks base method.
func (m *MockSysUserDao) GetRolesByUserID(db *gorm.DB, userID uint) ([]*po.SysRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesByUserID", db, userID)
	ret0, _ := ret[0].([]*po.SysRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesByUserID indicates an expected call of GetRolesByUserID.
func (mr *MockSysUserDaoMockRecorder) GetRolesByUserID(db, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesByUserID", reflect.TypeOf((*MockSysUserDao)(nil).GetRolesByUserID), db, userID)
}

// GetUserByEmail mocks base method.
func (m *MockSysUserDao) GetUserByEmail(db *gorm.DB, email string) (*po.SysUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", db, email)
	ret0, _ := ret[0].(*po.SysUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockSysUserDaoMockRecorder) GetUserByEmail(db, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockSysUserDao)(nil).GetUserByEmail), db, email)
}

// GetUserByID mocks base method.
func (m *MockSysUserDao) GetUserByID(db *gorm.DB, id uint) (*po.SysUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", db, id)
	ret0, _ := ret[0].(*po.SysUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockSysUserDaoMockRecorder) GetUserByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockSysUserDao)(nil).GetUserByID), db, id)
}

// GetUserByLoginName mocks base method.
func (m *MockSysUserDao) GetUserByLoginName(db *gorm.DB, loginName string) (*po.SysUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLoginName", db, loginName)
	ret0, _ := ret[0].(*po.SysUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLoginName indicates an expected call of GetUserByLoginName.
func (mr *MockSysUserDaoMockRecorder) GetUserByLoginName(db, loginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLoginName", reflect.TypeOf((*MockSysUserDao)(nil).GetUserByLoginName), db, loginName)
}

// GetUserCount mocks base method.
func (m *MockSysUserDao) GetUserCount(db *gorm.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCount", db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCount indicates an expected call of GetUserCount.
func (mr *MockSysUserDaoMockRecorder) GetUserCount(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCount", reflect.TypeOf((*MockSysUserDao)(nil).GetUserCount), db)
}

// GetUserList mocks base method.
func (m *MockSysUserDao) GetUserList(db *gorm.DB, pageQuery *dto.PageQuery) ([]*po.SysUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList", db, pageQuery)
	ret0, _ := ret[0].([]*po.SysUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockSysUserDaoMockRecorder) GetUserList(db, pageQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockSysUserDao)(nil).GetUserList), db, pageQuery)
}

// GetUserNameByID mocks base method.
func (m *MockSysUserDao) GetUserNameByID(db *gorm.DB, id uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNameByID", db, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNameByID indicates an expected call of GetUserNameByID.
func (mr *MockSysUserDaoMockRecorder) GetUserNameByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNameByID", reflect.TypeOf((*MockSysUserDao)(nil).GetUserNameByID), db, id)
}

// InsertRolesToUser mocks base method.
func (m *MockSysUserDao) InsertRolesToUser(db *gorm.DB, userID uint, roleIDs []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRolesToUser", db, userID, roleIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRolesToUser indicates an expected call of InsertRolesToUser.
func (mr *MockSysUserDaoMockRecorder) InsertRolesToUser(db, userID, roleIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRolesToUser", reflect.TypeOf((*MockSysUserDao)(nil).InsertRolesToUser), db, userID, roleIDs)
}

// InsertUser mocks base method.
func (m *MockSysUserDao) InsertUser(db *gorm.DB, user *po.SysUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", db, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockSysUserDaoMockRecorder) InsertUser(db, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockSysUserDao)(nil).InsertUser), db, user)
}

// UpdateUser mocks base method.
func (m *MockSysUserDao) UpdateUser(db *gorm.DB, user *po.SysUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", db, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockSysUserDaoMockRecorder) UpdateUser(db, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockSysUserDao)(nil).UpdateUser), db, user)
}

// UpdateUserPassword mocks base method.
func (m *MockSysUserDao) UpdateUserPassword(db *gorm.DB, userID uint, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", db, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockSysUserDaoMockRecorder) UpdateUserPassword(db, userID, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockSysUserDao)(nil).UpdateUserPassword), db, userID, password)
}
