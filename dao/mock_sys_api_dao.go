// Code generated by MockGen. DO NOT EDIT.
// Source: dao/sys_api_dao.go

// Package dao is a generated GoMock package.
package dao

import (
	po "FanCode/models/po"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSysApiDao is a mock of SysApiDao interface.
type MockSysApiDao struct {
	ctrl     *gomock.Controller
	recorder *MockSysApiDaoMockRecorder
}

// MockSysApiDaoMockRecorder is the mock recorder for MockSysApiDao.
type MockSysApiDaoMockRecorder struct {
	mock *MockSysApiDao
}

// NewMockSysApiDao creates a new mock instance.
func NewMockSysApiDao(ctrl *gomock.Controller) *MockSysApiDao {
	mock := &MockSysApiDao{ctrl: ctrl}
	mock.recorder = &MockSysApiDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysApiDao) EXPECT() *MockSysApiDaoMockRecorder {
	return m.recorder
}

// DeleteApiByID mocks base method.
func (m *MockSysApiDao) DeleteApiByID(db *gorm.DB, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiByID", db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiByID indicates an expected call of DeleteApiByID.
func (mr *MockSysApiDaoMockRecorder) DeleteApiByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiByID", reflect.TypeOf((*MockSysApiDao)(nil).DeleteApiByID), db, id)
}

// GetAllApi mocks base method.
func (m *MockSysApiDao) GetAllApi(db *gorm.DB) ([]*po.SysApi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllApi", db)
	ret0, _ := ret[0].([]*po.SysApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllApi indicates an expected call of GetAllApi.
func (mr *MockSysApiDaoMockRecorder) GetAllApi(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllApi", reflect.TypeOf((*MockSysApiDao)(nil).GetAllApi), db)
}

// GetApiByID mocks base method.
func (m *MockSysApiDao) GetApiByID(db *gorm.DB, id uint) (*po.SysApi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiByID", db, id)
	ret0, _ := ret[0].(*po.SysApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiByID indicates an expected call of GetApiByID.
func (mr *MockSysApiDaoMockRecorder) GetApiByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiByID", reflect.TypeOf((*MockSysApiDao)(nil).GetApiByID), db, id)
}

// GetApiCount mocks base method.
func (m *MockSysApiDao) GetApiCount(db *gorm.DB) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiCount", db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiCount indicates an expected call of GetApiCount.
func (mr *MockSysApiDaoMockRecorder) GetApiCount(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiCount", reflect.TypeOf((*MockSysApiDao)(nil).GetApiCount), db)
}

// GetApiListByParentID mocks base method.
func (m *MockSysApiDao) GetApiListByParentID(db *gorm.DB, parentID int32) ([]*po.SysApi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiListByParentID", db, parentID)
	ret0, _ := ret[0].([]*po.SysApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiListByParentID indicates an expected call of GetApiListByParentID.
func (mr *MockSysApiDaoMockRecorder) GetApiListByParentID(db, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiListByParentID", reflect.TypeOf((*MockSysApiDao)(nil).GetApiListByParentID), db, parentID)
}

// GetApiListByPathKeyword mocks base method.
func (m *MockSysApiDao) GetApiListByPathKeyword(db *gorm.DB, keyword string, page, pageSize int) ([]*po.SysApi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiListByPathKeyword", db, keyword, page, pageSize)
	ret0, _ := ret[0].([]*po.SysApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiListByPathKeyword indicates an expected call of GetApiListByPathKeyword.
func (mr *MockSysApiDaoMockRecorder) GetApiListByPathKeyword(db, keyword, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiListByPathKeyword", reflect.TypeOf((*MockSysApiDao)(nil).GetApiListByPathKeyword), db, keyword, page, pageSize)
}

// GetChildApisByParentID mocks base method.
func (m *MockSysApiDao) GetChildApisByParentID(db *gorm.DB, parentID uint) ([]*po.SysApi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildApisByParentID", db, parentID)
	ret0, _ := ret[0].([]*po.SysApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildApisByParentID indicates an expected call of GetChildApisByParentID.
func (mr *MockSysApiDaoMockRecorder) GetChildApisByParentID(db, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildApisByParentID", reflect.TypeOf((*MockSysApiDao)(nil).GetChildApisByParentID), db, parentID)
}

// InsertApi mocks base method.
func (m *MockSysApiDao) InsertApi(db *gorm.DB, api *po.SysApi) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertApi", db, api)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertApi indicates an expected call of InsertApi.
func (mr *MockSysApiDaoMockRecorder) InsertApi(db, api interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertApi", reflect.TypeOf((*MockSysApiDao)(nil).InsertApi), db, api)
}

// UpdateApi mocks base method.
func (m *MockSysApiDao) UpdateApi(db *gorm.DB, api *po.SysApi) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApi", db, api)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApi indicates an expected call of UpdateApi.
func (mr *MockSysApiDaoMockRecorder) UpdateApi(db, api interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApi", reflect.TypeOf((*MockSysApiDao)(nil).UpdateApi), db, api)
}
