// Code generated by MockGen. DO NOT EDIT.
// Source: dao/submission_dao.go

// Package dao is a generated GoMock package.
package dao

import (
	dto "FanCode/models/dto"
	po "FanCode/models/po"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSubmissionDao is a mock of SubmissionDao interface.
type MockSubmissionDao struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionDaoMockRecorder
}

// MockSubmissionDaoMockRecorder is the mock recorder for MockSubmissionDao.
type MockSubmissionDaoMockRecorder struct {
	mock *MockSubmissionDao
}

// NewMockSubmissionDao creates a new mock instance.
func NewMockSubmissionDao(ctrl *gomock.Controller) *MockSubmissionDao {
	mock := &MockSubmissionDao{ctrl: ctrl}
	mock.recorder = &MockSubmissionDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionDao) EXPECT() *MockSubmissionDaoMockRecorder {
	return m.recorder
}

// CheckUserIsSubmittedByTime mocks base method.
func (m *MockSubmissionDao) CheckUserIsSubmittedByTime(db *gorm.DB, userID uint, begin, end time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIsSubmittedByTime", db, userID, begin, end)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserIsSubmittedByTime indicates an expected call of CheckUserIsSubmittedByTime.
func (mr *MockSubmissionDaoMockRecorder) CheckUserIsSubmittedByTime(db, userID, begin, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIsSubmittedByTime", reflect.TypeOf((*MockSubmissionDao)(nil).CheckUserIsSubmittedByTime), db, userID, begin, end)
}

// GetLastSubmission mocks base method.
func (m *MockSubmissionDao) GetLastSubmission(db *gorm.DB, userID, problemID uint) (*po.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSubmission", db, userID, problemID)
	ret0, _ := ret[0].(*po.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSubmission indicates an expected call of GetLastSubmission.
func (mr *MockSubmissionDaoMockRecorder) GetLastSubmission(db, userID, problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSubmission", reflect.TypeOf((*MockSubmissionDao)(nil).GetLastSubmission), db, userID, problemID)
}

// GetSubmissionCount mocks base method.
func (m *MockSubmissionDao) GetSubmissionCount(db *gorm.DB, submission *po.Submission) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubmissionCount", db, submission)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubmissionCount indicates an expected call of GetSubmissionCount.
func (mr *MockSubmissionDaoMockRecorder) GetSubmissionCount(db, submission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubmissionCount", reflect.TypeOf((*MockSubmissionDao)(nil).GetSubmissionCount), db, submission)
}

// GetSubmissionList mocks base method.
func (m *MockSubmissionDao) GetSubmissionList(db *gorm.DB, pageQuery *dto.PageQuery) ([]*po.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubmissionList", db, pageQuery)
	ret0, _ := ret[0].([]*po.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubmissionList indicates an expected call of GetSubmissionList.
func (mr *MockSubmissionDaoMockRecorder) GetSubmissionList(db, pageQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubmissionList", reflect.TypeOf((*MockSubmissionDao)(nil).GetSubmissionList), db, pageQuery)
}

// GetUserSimpleSubmissionsByTime mocks base method.
func (m *MockSubmissionDao) GetUserSimpleSubmissionsByTime(db *gorm.DB, userID uint, begin, end time.Time) ([]*po.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSimpleSubmissionsByTime", db, userID, begin, end)
	ret0, _ := ret[0].([]*po.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSimpleSubmissionsByTime indicates an expected call of GetUserSimpleSubmissionsByTime.
func (mr *MockSubmissionDaoMockRecorder) GetUserSimpleSubmissionsByTime(db, userID, begin, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSimpleSubmissionsByTime", reflect.TypeOf((*MockSubmissionDao)(nil).GetUserSimpleSubmissionsByTime), db, userID, begin, end)
}

// InsertSubmission mocks base method.
func (m *MockSubmissionDao) InsertSubmission(db *gorm.DB, submission *po.Submission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSubmission", db, submission)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSubmission indicates an expected call of InsertSubmission.
func (mr *MockSubmissionDaoMockRecorder) InsertSubmission(db, submission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSubmission", reflect.TypeOf((*MockSubmissionDao)(nil).InsertSubmission), db, submission)
}
